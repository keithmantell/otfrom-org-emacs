* Helpers

  There are a number of helper functions that we'll need through the
  rest of this. We'll just define them up here.

** load-if-exists

   This is just a nice function to load a file if it exists, but just
   print a message rather than an error if it doesn't. This is handy
   for things like loading specific local config that you don't want
   to go into github or be shared such as erc nicks, passwords, blog
   rolls, etc.

   #+BEGIN_SRC emacs-lisp
     (defun load-if-exists (file)
       (if (file-exists-p file)
           (progn
             (load file)
             (message (format "Loading file: %s" file)))
         (message (format "No %s file. So not loading one." file))))
   #+END_SRC

** add-to-hooks

   A little helper function to make adding things to hooks easier.

   #+BEGIN_SRC emacs-lisp
     (defun bld/add-to-hooks (f hooks)
       "Add funcion F to all HOOKS."
       (dolist (hook hooks)
         (add-hook hook f)))
   #+END_SRC

* Version Control with magit and Diffing with ediff

  Once we have things up and running, really the most basic thing is
  version control. This allows us to add everything else we need in an
  organised manner. Once we have this we can bootstrap everything
  else.

  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :bind (("C-c g" . magit-status)))
  #+END_SRC

  Once we do have version control and can do things with ediff, which
  is a great mode for looking at diffs between versions, buffer, files
  and directory trees, I want to fix how the windows work as the
  default annoys me when it creates separate frames. I'd much rather
  move around windows inside the one emacs frame.

  #+BEGIN_SRC emacs-lisp
    (use-package ediff
      :config
      (setq ediff-window-setup-function 'ediff-setup-windows-plain))
  #+END_SRC

** Delete that trailing whitespace

   Trailing whitespace just causes trouble with diffs and version
   control. So let's get rid of it.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook
               (lambda nil
                 (delete-trailing-whitespace)))
   #+END_SRC

* Make it pretty

** Colours

   It seems trivial, but it is one of the first things I do after I
   get the basics up and running. I like to get my colours and other
   basic window chrome and geegaws right.

   #+BEGIN_SRC emacs-lisp
     (load-theme 'wheatgrass)
   #+END_SRC

* Finishing

** Enabling the disabled

*** upcase and downcase region

    I like to be able to do this. I get lots of things that come in
    SHOUTING or that need to SHOUT.

    #+BEGIN_SRC emacs-lisp
      (put 'downcase-region 'disabled nil)
      (put 'upcase-region 'disabled nil)
    #+END_SRC

*** Narrowing the region to what I want to look at

    This isn't needed quite so much now that searches, regexp and
    otherwise operate, sometimes annoyingly to an old timer like me, on
    the region rather than the whole buffer window. I still like to
    narrow down to what I'm interested in though and not every handy
    tool in emacs is quite so region oriented.

    #+BEGIN_SRC emacs-lisp
      (put 'narrow-to-region 'disabled nil)
    #+END_SRC

** custom.el

   custom.el is great for configuring things through that "gui" in
   emacs, but it is a real pain when it drops junk in your [[../init.el][init.el]] and
   messes up your pretty config and git history and is stuff that you
   don't want to leak out on to github. You can change the location of
   this file though and I like to do this.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (concat user-emacs-directory "local/custom.el"))
     (load-if-exists custom-file)
   #+END_SRC

** passwords and encrypted things

   It is good to store your passwords and things in an encrypted
   file. I call mine mellon, because you can only read it if you are
   my friend and have the passphrase.

   This does mean that every time you use it you have to give the
   passphrase, but it does mean that you can keep all your passwords
   for things like erc and stuff in a file reasonably safely (though
   it will be in memory when emacs is running, so it isn't completely
   secure).

   #+BEGIN_SRC emacs-lisp
     (load-if-exists (concat user-emacs-directory "local/mellon.el.gpg"))
   #+END_SRC

** Finis

   I should really come up with better exhortations than this. The
   stuff that Sam Aaron has in emacs-live I actually find quite
   inspirational. cider.el has similar, though more specifically
   clojurian things to say that I quite like as well.

   However, I've always expected that any sufficiently advanced lisp
   system has probably gained sentience. I think Emacs probably
   qualifies for that.

   Therefore, let's sign off as so...

   #+BEGIN_SRC emacs-lisp
     (message "Cogito ergo sum.")
   #+END_SRC
