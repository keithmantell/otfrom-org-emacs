* Helpers

  There are a number of helper functions that we'll need through the
  rest of this. We'll just define them up here.

** load-if-exists

   This is just a nice function to load a file if it exists, but just
   print a message rather than an error if it doesn't. This is handy
   for things like loading specific local config that you don't want
   to go into github or be shared such as erc nicks, passwords, blog
   rolls, etc.

   #+BEGIN_SRC emacs-lisp
     (defun load-if-exists (file)
       (if (file-exists-p file)
           (progn
             (load file)
             (message (format "Loading file: %s" file)))
         (message (format "No %s file. So not loading one." file))))
   #+END_SRC

** add-to-hooks

   A little helper function to make adding things to hooks easier.

   #+BEGIN_SRC emacs-lisp
     (defun bld/add-to-hooks (f hooks)
       "Add funcion F to all HOOKS."
       (dolist (hook hooks)
         (add-hook hook f)))
   #+END_SRC

* Starting

  There are some variables we'll really want to set up before
  everything gets kicked off. Usually we'd want to do this by using
  the :config key in use-package, but sometimes, I'm not smart enough
  to know how to do it.

** Backups

   Backups are handy for those times where you run out of power
   suddenly or you get a kernel panic, but it isn't fun having them
   littered around the system.

   #+BEGIN_SRC emacs-lisp
     (setq
      backup-by-copying t      ; don't clobber symlinks
      backup-directory-alist
      '(("." . "~/.saves"))    ; don't litter my fs tree
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)       ; use versioned backups
   #+END_SRC

** Enabling the disabled

*** upcase and downcase region

    I like to be able to do this. I get lots of things that come in
    SHOUTING or that need to SHOUT.

    #+BEGIN_SRC emacs-lisp
      (put 'downcase-region 'disabled nil)
      (put 'upcase-region 'disabled nil)
    #+END_SRC

*** Narrowing the region to what I want to look at

    This isn't needed quite so much now that searches, regexp and
    otherwise operate, sometimes annoyingly to an old timer like me, on
    the region rather than the whole buffer window. I still like to
    narrow down to what I'm interested in though and not every handy
    tool in emacs is quite so region oriented.

    #+BEGIN_SRC emacs-lisp
      (put 'narrow-to-region 'disabled nil)
    #+END_SRC

** custom.el

   custom.el is great for configuring things through that "gui" in
   emacs, but it is a real pain when it drops junk in your [[../init.el][init.el]] and
   messes up your pretty config and git history and is stuff that you
   don't want to leak out on to github. You can change the location of
   this file though and I like to do this.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (concat user-emacs-directory "local/custom.el"))
     (load-if-exists custom-file)
   #+END_SRC

** passwords and encrypted things

   It is good to store your passwords and things in an encrypted
   file. I call mine mellon, because you can only read it if you are
   my friend and have the passphrase.

   This does mean that every time you use it you have to give the
   passphrase, but it does mean that you can keep all your passwords
   for things like erc and stuff in a file reasonably safely (though
   it will be in memory when emacs is running, so it isn't completely
   secure).

   #+BEGIN_SRC emacs-lisp
     (load-if-exists (concat user-emacs-directory "local/mellon.el.gpg"))
   #+END_SRC

* Version Control with magit and Diffing with ediff

  Once we have things up and running, really the most basic thing is
  version control. This allows us to add everything else we need in an
  organised manner. Once we have this we can bootstrap everything
  else.

  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :bind (("C-c g" . magit-status)))
  #+END_SRC

  Once we do have version control and can do things with ediff, which
  is a great mode for looking at diffs between versions, buffer, files
  and directory trees, I want to fix how the windows work as the
  default annoys me when it creates separate frames. I'd much rather
  move around windows inside the one emacs frame.

  #+BEGIN_SRC emacs-lisp
    (use-package ediff
      :config
      (setq ediff-window-setup-function 'ediff-setup-windows-plain))
  #+END_SRC

** link to github

   #+BEGIN_SRC emacs-lisp
     (use-package git-link
       :ensure t)
   #+END_SRC

** Step through those versions of a file with the time machine

   #+BEGIN_SRC emacs-lisp
     (use-package git-timemachine
       :ensure t)
   #+END_SRC

** See last commit for this line in a popup

   #+BEGIN_SRC emacs-lisp
     (use-package git-messenger
       :ensure t)
   #+END_SRC

** Delete that trailing whitespace

   Trailing whitespace just causes trouble with diffs and version
   control. So let's get rid of it.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook
               (lambda nil
                 (delete-trailing-whitespace)))
   #+END_SRC

* Make it pretty

** Colours

   It seems trivial, but it is one of the first things I do after I
   get the basics up and running. I like to get my colours and other
   basic window chrome and geegaws right.

   #+BEGIN_SRC emacs-lisp
     (use-package color-theme-sanityinc-tomorrow
       :ensure t
       :load-path "themes"
       :config
       (load-theme 'sanityinc-tomorrow-bright t))
   #+END_SRC

** Bars, columns and lines

   I don't want a tool bar or a scroll bar ever and I don't want a
   menu when I'm in a terminal window.  I do like the menu ot discover
   new things and keybindings when I'm using emacs as an X
   application.

   #+BEGIN_SRC emacs-lisp
     ;; no toolbar
     (tool-bar-mode -1)

     ;; no menu in a terminal
     (unless window-system
       (menu-bar-mode -1))

     ;; no scroll bar
     (scroll-bar-mode -1)

     ;; no horizontal scroll bar
     (when (boundp 'horizontal-scroll-bar-mode)
       (horizontal-scroll-bar-mode -1))
   #+END_SRC

   I also like to have an idea of where I am in the file so I'd like
   line and column numbers.

   #+BEGIN_SRC emacs-lisp
     (line-number-mode 1)
     (column-number-mode 1)
   #+END_SRC
** Startup Screen

   I'd also like to skip the startup screen and go straight to the
   *scratch* buffer.

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
   #+END_SRC

* Programming

  Configuring emacs is lisp coding. When I'm not coding in emacs-lisp,
  I'm usually coding in clojure. I'd like to try to get get nice
  environments for both as quickly as possible.

** Helping in all modes

   Some minor modes just help with programming everywhere.

*** company

    This is the best completion package available in emacs at the
    moment. It works with most programming modes.

    #+BEGIN_SRC emacs-lisp
      (use-package company
        :ensure t
        :diminish company-mode
        :config
        (global-company-mode))
    #+END_SRC

*** projectile

    Projectile allows you to treat gropus of files under git control
    or other build tools as projects and navigate and search them in
    easier ways.

    #+BEGIN_SRC emacs-lisp
      (use-package projectile
        :ensure t
        :diminish projectile-mode
        :config
        (setq projectile-enable-caching t)
        (projectile-global-mode 1))
    #+END_SRC

*** tabs are evil

    They are, they just are. I spent time putting those characters in
    the right place. I don't want you to change that.

    #+BEGIN_SRC emacs-lisp
      (setq-default indent-tabs-mode nil)
    #+END_SRC

*** whitespace mode

    You never know when the evils of whitespace might be around. When
    will it catch you out?

    #+BEGIN_SRC emacs-lisp
      (use-package whitespace
        :diminish whitespace
        :init (setq whitespace-style '(face tabs trailing))
        :config (global-whitespace-mode t))
    #+END_SRC

*** flycheck

    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :ensure t)
    #+END_SRC

** Lisps

   I am a big fan of lisps. I like the syntax and some of the
   communities now a days are very nice places to be in.

   At the moment most of my lisp work is either in emacs-lisp or in
   clojure.

   Below are the ways I configure various lisp modes.

*** Lisp Hooks

    There are a number of related lisp modes and I'd like to make a
    them behave the same (when that makes sense anyway).

    #+BEGIN_SRC emacs-lisp
      (defvar lisp-mode-hooks
        '(emacs-lisp-mode-hook lisp-mode-hook clojure-mode-hook))

      (defvar lisp-interaction-mode-hooks
        '(lisp-interaction-modes-hook cider-mode-hook cider-repl-mode-hook))
    #+END_SRC

**** Indent all the things... aggressively

     I love this mode when doing lisp stuff. It really makes it
     obvious when you don't have things balanced up and keeps your
     code tidy.

     #+BEGIN_SRC emacs-lisp
       (use-package aggressive-indent
         :ensure t
         :diminish aggressive-indent-mode
         :config (bld/add-to-hooks #'aggressive-indent-mode lisp-mode-hooks))
     #+END_SRC

**** eldoc so you know what is going on

     eldoc is another great little tip so that you can see what the
     signature is for the functions you are using.

     #+BEGIN_SRC emacs-lisp
       (use-package eldoc
         :diminish eldoc-mode
         :config (bld/add-to-hooks #'eldoc-mode
                                   (append lisp-mode-hooks lisp-interaction-mode-hooks)))
     #+END_SRC

**** paredit

     I *always* want my parens to match (except in text modes).

     #+BEGIN_SRC emacs-lisp
       (use-package paredit
         :ensure t
         :diminish paredit-mode
         :config (bld/add-to-hooks #'paredit-mode
                                   (append lisp-mode-hooks lisp-interaction-mode-hooks)))
     #+END_SRC

**** rainbow delimiters

     All of those delimeters should be pretty and give you a hint as
     to where they match.

     #+BEGIN_SRC emacs-lisp
       (use-package rainbow-delimiters
         :ensure t
         :diminish rainbow-delimiters
         :config (bld/add-to-hooks #'rainbow-delimiters-mode
                                   (append lisp-mode-hooks lisp-interaction-mode-hooks)))
     #+END_SRC

**** Paren matching

     Because you really need to see where those things match.

     #+BEGIN_SRC emacs-lisp
       (use-package paren
         :config (bld/add-to-hooks #'show-paren-mode
                                   (append lisp-mode-hooks lisp-interaction-mode-hooks)))
     #+END_SRC

*** clojure and CIDER

    Clojure is certainly my favorite lisp on the JVM and is the one I
    use most professionally, or at least the one I create code in that
    I ship to other people.

    #+BEGIN_SRC emacs-lisp
      (use-package clojure-mode
        :ensure t
        :defer t
        :mode (("\\.clj\\'" . clojure-mode)
               ("\\.edn\\'" . clojure-mode)))
    #+END_SRC

    CIDER is the mode that lets us connect to a REPL and evaluate code
    and do REPL Driven Development.

    #+BEGIN_SRC emacs-lisp
      (use-package cider
        :ensure t
        :defer t
        :config
        (setq cider-repl-history-file (concat user-emacs-directory "cider-history")
              cider-repl-history-size 1000
              cider-font-lock-dynamically '(macro core function var)
              cider-overlays-use-font-lock t
              cider-pprint-fn 'fipp
              cider-cljs-lein-repl "(do (use 'figwheel-sidecar.repl-api) (start-figwheel!) (cljs-repl))"))
    #+END_SRC

    clj-refactor lets us move a lot of things around and get less
    often used bits of syntax like ns declrations correct.

    #+BEGIN_SRC emacs-lisp
      (use-package clj-refactor
        :ensure t
        :defer t
        :config
        (defun my-clj-refactor-hook ()
          (message "Running cljr hook.")
          (clj-refactor-mode 1)
          (cljr-add-keybindings-with-prefix "C-c r"))
        (add-hook 'clojure-mode-hook 'my-clj-refactor-hook))
    #+END_SRC

** Scala

   Yeah, I'll have a java mode here too at some point.

   #+BEGIN_SRC emacs-lisp
     (use-package ensime
       :ensure t
       :pin melpa-stable)
   #+END_SRC

** Ops Stuff
*** Docker

    DOCKER ALL THE THINGS!!!!

    #+BEGIN_SRC emacs-lisp
      (use-package dockerfile-mode
        :ensure t)
    #+END_SRC

*** Terraform

    Highlight the syntax of those terraform files.

    #+BEGIN_SRC emacs-lisp
      (use-package terraform-mode
        :ensure t)
    #+END_SRC

** Shell Scripting

   Check those bash scripts using [[http://skybert.net/emacs/bash-linting-in-emacs/][shellcheck]].

   #+BEGIN_SRC emacs-lisp
     (add-hook 'sh-mode-hook 'flycheck-mode)
   #+END_SRC

** YAML

   So many bad things have been done with YAML. It is less verbose
   than JSON or XML, but I'm not sure it is really better.

   #+BEGIN_SRC emacs-lisp
      (use-package yaml-mode
        :ensure t)
   #+END_SRC

* Text Modes

** Text Mode Basics

   If we are in a text mode we want flyspell and auto-fill-mode.

   #+BEGIN_SRC emacs-lisp
     (use-package flyspell
       :diminish flyspell-mode
       :config (add-hook 'text-mode-hook
                         (lambda () (flyspell-mode 1))))
   #+END_SRC

   auto-fill-mode & text-mode is a bit weird and I've really not found
   a way to make it play nicely with use-package they way I've done
   the other minor modes. So I've just gone old school here.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'text-mode-hook
               (lambda ()
                 (auto-fill-mode 1)
                 (diminish auto-fill-function)))
   #+END_SRC

** unfill - the lpad of emacs lisp?

   I may regret this, but I actually want it for copying and pasting
   from emacs into other things that don't want lines filled nicely.

   #+BEGIN_SRC emacs-lisp
     (use-package unfill
       :ensure t)
   #+END_SRC

** Markdown

   Not everything is done in org-mode. Though perhaps it should be.

   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t
       :mode (".md$" . gfm-mode))
   #+END_SRC

** org-mode

   This mode is so powerful, I like to program in it. :-D

*** org-gcal

    I'd like to have my Google Calendar events in org-mode agenda
    buffers. This isn't because I particularly like Google Calendar,
    but it is a convenient way to share my schedule with my
    colleagues, friends and customers.

    #+BEGIN_SRC emacs-lisp
      (use-package org-gcal
        :ensure t)
    #+END_SRC

*** org agenda

    These are the files that I currently need to keep an up to date
    integrated agenda.

    #+BEGIN_SRC emacs-lisp
      (setq org-agenda-files
            (append '("~/org/todos.org"
                      "~/org/work.org"
                      "~/org/diary.org"
                      "~/org/personal.org")
                    (mapcar 'cdr org-gcal-file-alist)))
      #+END_SRC

*** org agenda clock editing

    There are a lot of interesting things [[https://github.com/dfeich/org-clock-convenience][here]] about editing and
    tracking time in org-agenda files.

    #+BEGIN_SRC emacs-lisp
      (use-package org-clock-convenience
        :ensure t
        :config
        (defun dfeich/org-agenda-mode-fn ()
          (define-key org-agenda-mode-map
            (kbd "<S-up>") #'org-clock-convenience-timestamp-up)
          (define-key org-agenda-mode-map
            (kbd "<S-down>") #'org-clock-convenience-timestamp-down)
          (define-key org-agenda-mode-map
            (kbd "ø") #'org-clock-convenience-fill-gap)) ; AltGr-o
        (add-hook 'org-agenda-mode-hook #'dfeich/org-agenda-mode-fn))
    #+END_SRC

*** mailbox like rescheduling.

    mailbox is gone -- a victim of the M&A wars. We can still carry on
    with the ideas though due to the power of Free Software.

    #+BEGIN_SRC emacs-lisp
      (use-package orgbox
        :ensure t)
    #+END_SRC

*** org-journal

    When I'm not trying to actually follow a procedure around using
    org-mode for day to day stuff, I basically follow the pattern
    [[https://github.com/bastibe/][bastibe]] talks about [[https://github.com/bastibe/org-journal][here]].

    I've tried gtd things, deft, using org-capture and refile and I've
    never really stuck with any of them. The one that did work very
    well for me was the predecessor to org-mode [[https://www.emacswiki.org/emacs/PlannerMode][planner-mode]].

    #+BEGIN_SRC emacs-lisp
      (use-package org-journal
        :ensure t
        :bind (("C-c j" . org-journal-new-entry))
        :init
        (setq org-journal-dir "~/org/journal/")
        (add-to-list 'auto-mode-alist '("org/journal" . org-mode)))
    #+END_SRC

*** org-mode tweaks

    There a soooo many things to configure in org-mode. Here are some
    of the ones that are core to me.

    #+BEGIN_SRC emacs-lisp
      (eval-after-load "org"
        '(progn (setq org-log-done 'note)         ; log when we finish things
                (setq org-log-into-drawer t) ; put log into the drawer
                (setq org-default-notes-file "~/org/todos.org")
                (setq org-clock-persist 'history)
                (setq org-link-search-must-match-exact-headline nil) ;; fuzzy match headlines
                (setq org-agenda-window-setup 'current-window) ; agenda in current window
                (org-clock-persistence-insinuate) ; keep the clock history
                (appt-activate 1))) ; shout when we have appts


      (setq org-use-fast-todo-selection t)
      (setq org-todo-keywords
            '((sequence "UPCOMING(u)" "PROJECT(p)" "|" "SHIPPED(s)")
              (sequence "TODO(t)" "NEXT(n!/!)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "INACTIVE(i@/!)" "|" "CANCELLED(c@/!)" "MEETING")))

      (setq org-todo-state-tags-triggers
            '(("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("INACTIVE" ("WAITING") ("INACTIVE" . t))
              (done ("WAITING") ("INACTIVE"))
              ("TODO" ("WAITING") ("CANCELLED") ("INACTIVE"))
              ("NEXT" ("WAITING") ("CANCELLED") ("INACTIVE"))
              ("DONE" ("WAITING") ("CANCELLED") ("INACTIVE"))))


      (global-set-key (kbd "C-c c") 'org-capture)
      (global-set-key (kbd "C-c a") 'org-agenda)
    #+END_SRC

*** Custom Agenda Views

    The default agenda is a good start, but we can do a bit better.

**** What am I doing in the Current Cake Countdown?

     My default view, as I mostly use org for keeping my working
     days in line is around the Current Cake Countdown, which is
     what we call our iterations as we celebrate the end of each
     iteration with cake and don't do a lot of fast running as we
     are programmers.

     This is a composite agenda view that shows the agenda by date
     at the top and the todo list below that.

     The agenda spans one week and starts on a Wednesday (weekday
     3).

     It shows the tasks I have scheduled for this week and my deadlines
     in the main agenda and a sub area showing things I've not put a
     date on yet.

     I also remove items that are scheduled or with deadlines from
     the weekly agenda when they are done. This is so I can keep the
     clutter down in this view and decide on what I want my next
     step to be.

     The todo items are also filtered to only show things that have
     the Owner property set to my name.

     #+BEGIN_SRC emacs-lisp
       (add-to-list
        'org-agenda-custom-commands
        '("M" "My Current Cake Countdown"
          ((agenda "My Current Cake Countdown"
                   ((org-agenda-span 'week)
                    (org-agenda-start-on-weekday 3)
                    (org-agenda-skip-deadline-if-done t)
                    (org-agenda-skip-scheduled-if-done t)))
           (tags-todo "TODO=\"NEXT\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                       (org-agenda-overriding-header "Unscheduled NEXTs: ")))
           (tags-todo "TODO=\"TODO\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                       (org-agenda-overriding-header "Unscheduled TODOs: "))))))
     #+END_SRC

**** Last & Upcoming

     I need to know what I was doing on the last working day and I'd
     like to know what is coming up in the next 7 days.

     #+BEGIN_SRC emacs-lisp
       (add-to-list
        'org-agenda-custom-commands
        '("U" "Last and Upcoming"
          ((agenda "Last and Upcoming"
                   ((org-agenda-span 10)
                    (org-agenda-start-day
                     (pcase (calendar-day-of-week (calendar-current-date))
                       (1 "-3d") ; Show Friday
                       (0 "-2d") ; Show Friday
                       (_ "-1d")))))
           (tags-todo "TODO=\"NEXT\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                       (org-agenda-overriding-header "Unscheduled NEXTs: ")))
           (tags-todo "TODO=\"TODO\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                       (org-agenda-overriding-header "Unscheduled TODOs: "))))))
     #+END_SRC

**** Yesterday-ish & Today & Tomorrow-ish

     I need to know what I was doing on the last working day and I'd
     like to know what is coming up in the next working day.

     So let's define a function that will give us this range of
     days. I should expand this so that it can deal with things like
     bank holidays.

     #+BEGIN_SRC emacs-lisp
       (defun ytt-agenda-range (day-of-week)
         (pcase day-of-week
           (0 '("-2d" 4)) ;; On Sunday Show Friday to Monday
           (1 '("-3d" 6)) ;; On Monday Show Friday to Tuesday
           (2 '("-1d" 3)) ;; On Tuesday Show Monday to Wednesday
           (3 '("-1d" 3)) ;; On Wednesday Show Tuesday to Thursday
           (4 '("-1d" 3)) ;; On Thursday Show Wednesday to Friday
           (5 '("-1d" 5)) ;; On Friday Show Thursday to Monday
           (6 '("-1d" 4)) ;; On Saturday Show Friday to Monday
           ))

       (defun ytt-start-day (day-of-week)
         (car (ytt-agenda-range day-of-week)))

       (defun ytt-span (day-of-week)
         (cadr (ytt-agenda-range day-of-week)))
     #+END_SRC

     And then let's use it in the agenda here:

     #+BEGIN_SRC emacs-lisp
       (setq org-stuck-projects '("TODO=\"PROJECT\"+CATEGORY=\"work\"" ("NEXT") nil ""))
       (add-to-list
        'org-agenda-custom-commands
        '("y" "Yesterday-ish, Today and Tomorrow-ish"
          ((agenda "Today"
                   ((org-agenda-span 0)
                    (org-agenda-start-day "+0d")))
           (tags-todo "TODO=\"NEXT\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                       (org-agenda-overriding-header "Unscheduled NEXTs: ")))
           (tags-todo "TODO=\"WAITING\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                       (org-agenda-overriding-header "Blocked: ")))
           (tags-todo "kaylee"
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                       (org-agenda-overriding-header "Unscheduled Kaylee Tasks")))
           (stuck "CATEGORY=\"work\""
                  ((org-agenda-overriding-header "Stuck Work Projects: ")))
           (tags-todo "TODO=\"PROJECT\"+CATEGORY=\"work\""
                      ((org-agenda-overriding-header "Active Work Projects: ")))
           (tags-todo "TODO=\"PROJECT\"+CATEGORY=\"personal\""
                      ((org-agenda-overriding-header "Personal Projects: ")))
           (agenda "Yesterday-ish, Today and Tomorrow-ish"
                   ((org-agenda-span (ytt-span (calendar-day-of-week (calendar-current-date))))
                    (org-agenda-start-day (ytt-start-day (calendar-day-of-week (calendar-current-date))))))
           (tags-todo "TODO=\"TODO\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                       (org-agenda-overriding-header "Unscheduled TODOs: "))))))
     #+END_SRC

**** Holidays

     From the help-gnu-emacs [[https://lists.gnu.org/archive/html/help-gnu-emacs/2014-08/msg00093.html][list]].

     And more details from the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Holiday-Customizing.html][GNU Emacs Manual]].

     #+BEGIN_SRC emacs-lisp
       (setq calendar-date-style 'european)
     #+END_SRC

     #+BEGIN_EXAMPLE
       Hmmm, a very quick try:
       Holidays from:
       https://en.wikipedia.org/wiki/Public_holidays_in_the_United_Kingdom

       Put this in your .emacs, restart, and give it a try:

       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       (setq european-calendar-style t             ; obsolete!
             calendar-date-style 'european
                                               ;        calendar-latitude
                                               ;        calendar-longitude
             calendar-week-start-day 1
             mark-holidays-in-calendar t
             ;; remove some holidays
             all-christian-calendar-holidays nil         ;obsolete
             calendar-christian-all-holidays-flag nil
             general-holidays t
             hebrew-holidays nil
             islamic-holidays nil
             oriental-holidays nil
             bahai-holidays nil)

       (setq holiday-general-holidays
             '((holiday-fixed 1 1 "New Year's Day")
               (holiday-fixed 3 17 "St. Patrick's Day")
               (holiday-float 5 1 1 "May Day Bank Holiday")
               (holiday-fixed 7 12 "Battle of the Boyne")
               (holiday-float 8 1 -1 "May Day Bank Holiday")
               (holiday-fixed 12 26 "Boxing Day")))

       (setq holiday-christian-holidays
             '((holiday-fixed 12 25 "Christmas Day")
               (holiday-easter-etc  -2 "Good Friday")
               (holiday-easter-etc  +1 "Easter Monday")))

       (setq calendar-holidays
             (append general-holidays
                     christian-holidays))

       (setq org-agenda-include-diary t)
       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     #+END_EXAMPLE

**** Pomodoro in agenda

     Something to keep me focused and take breaks when I am focused
     (so I don't die from sitting in one place for too long).

     #+BEGIN_SRC emacs-lisp
       (use-package org-pomodoro
         :ensure t
         :config
         (add-hook 'org-agenda-mode-hook
                   (lambda () (local-set-key (kbd "P") 'org-pomodoro))))
     #+END_SRC

*** Capturing & Refiling

    My thinking at the moment is that I'll take day notes in
    org-journal, have a wiki like thing in other org files and
    interleave (and use org links to keep them all together under my
    org-directory) and have a todos.org file which will have all my
    other todo goodies which I can capture from other files, pivotal
    tracker stuff or from the journal itself which should make it so
    my todos always point back to where they initially came from.

    We'll see if it works for now.

    #+BEGIN_SRC emacs-lisp
      (setq org-capture-templates
            '(("t" "To do"
               entry (file+datetree org-default-notes-file)
               "* TODO %?\n%^{Owner}p\n%U\n%a\n"
               :empty-lines-before 1)
              ("n" "Doing RIGHT NOW"
               entry (file+datetree org-default-notes-file)
               "* NEXT %?\n%^{Owner}p\n%U\n%a\n"
               :clock-in t :clock-resume t :empty-lines-before 1)
              ("r" "Running commentary"
               entry (clock)
               "* %?\n%U\n%a\n"
               :clock-keep t :empty-lines-before 1)
              ("m" "Meeting"
               entry (file+datetree org-default-notes-file)
               "* MEETING with %? :MEETING:\n%T\n%a" :clock-in t :clock-resume t)
              ("d" "Diary"
               entry (file+datetree "~/org/diary.org")
               "* %?\n%U\n" :clock-in t :clock-resume t)
              ("i" "Idea"
               entry (file org-default-notes-file)
               "* %? :IDEA: \n%t" :clock-in t :clock-resume t)
              ("c" "Contacts"
               entry (file "~/org/contacts.org")
               "* %(org-contacts-template-name)\n:PROPERTIES:\n:EMAIL: %(org-contacts-template-email)\n:PHONE:\n:ALIAS:\n:NICKNAME:\n:IGNORE:\n:ICON:\n:NOTE:\n:ADDRESS:\n:BIRTHDAY:\n:LAST_READ_MAIL:\n:END:"
               :empty-lines-before 1)
              ("l"
               "Capture a link"
               entry
               (file+datetree "~/org/links.org")
               "* %? %^g\n"
               :empty-lines-before 1)))
     #+END_SRC

**** Refiling

     I've never really been terribly happy with how this works. This
     might be a reasonable start though.

     #+BEGIN_SRC emacs-lisp
       (setq org-refile-allow-creating-parent-nodes t)

       (setq org-refile-targets
             '(("work.org" :maxlevel . 9)
               ("personal.org" :maxlevel . 9)))
       (setq org-refile-use-outline-path t)

       (setq org-link-search-must-match-exact-headline nil)
     #+END_SRC

*** Interleave

    Could this be the best way to take notes on pdfs?

    #+BEGIN_SRC emacs-lisp
      (use-package interleave
        :ensure t
        :config (setq interleave-org-notes-dir-list '("~/org/interleave" ".")))
    #+END_SRC

*** Transport for London in org-mode

    Because, why not and I don't always want to got to the website.

    #+BEGIN_SRC emacs-lisp
      (use-package org-tfl
        :ensure t)
    #+END_SRC

*** clipboard URLs to org-mode

    I'm a real pack rat when it comes to book marking things. I've
    always wanted to have them integrated with everything else and
    under my control. I'm hoping that org-cliplink will help with
    that.

    #+BEGIN_SRC emacs-lisp
      (use-package org-cliplink
        :ensure t)
    #+END_SRC

*** org pinboard like thing

    I want to archive those pages. Who knows I might want to do some
    text analysis son them.

    #+BEGIN_SRC emacs-lisp
      (use-package org-board
        :ensure t)
    #+END_SRC

*** Preview org-mode pages as html

    I'm hoping this will be handy for copying and pasting org-mode
    stuff into emails and google docs for sharing with unbelievers.

    #+BEGIN_SRC emacs-lisp
      (use-package org-preview-html
        :ensure t)
    #+END_SRC

*** org-babel

    #+BEGIN_SRC emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages '((shell . t)))
    #+END_SRC

* Other Modes

** ido and smex

   I just want to use this everywhere. I've tried using helm before
   for a similar purpose and while it is really good I found it a bit
   too intrusive. This might be because I am interface damaged from
   years of using emacs, but this is my config if you want to go wild
   with helm, then create your own. ;-)

   #+BEGIN_SRC emacs-lisp
     (use-package smex
       :ensure t
       :bind (("M-x" . smex))
       :config (smex-initialize))  ; smart meta-x (use IDO in minibuffer)

     (use-package ido
       :ensure t
       :demand t
       :bind (("C-x b" . ido-switch-buffer))
       :config (ido-mode 1)
       (setq ido-create-new-buffer 'always  ; don't confirm when creating new buffers
             ido-enable-flex-matching t     ; fuzzy matching
             ido-everywhere t  ; tbd
             ido-case-fold t)) ; ignore case

     (use-package ido-ubiquitous
       :ensure t
       :config (ido-ubiquitous-mode 1))

     (use-package flx-ido
       :ensure t
       :config (flx-ido-mode 1))

     (use-package ido-vertical-mode
       :ensure t
       :config (ido-vertical-mode 1))
   #+END_SRC

** ibuffer

   I've never used ibuffer much before, but many people swear by it
   (rather than at it). I've tried it now and it looks good. So let's
   rebind C-x C-b.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x C-b") 'ibuffer)
   #+END_SRC

** Moving windows and buffers

   I like to be able to move windows and buffers around quickly and
   for the keys to be quite similar.

   #+BEGIN_SRC emacs-lisp
     (use-package buffer-move
       :ensure t
       :bind (([M-s-up] . buf-move-up)
              ([M-s-down] . buf-move-down)
              ([M-s-right] . buf-move-right)
              ([M-s-left] . buf-move-left)
              ([s-up] . windmove-up)
              ([s-down] . windmove-down)
              ([s-right] . windmove-right)
              ([s-left] . windmove-left)))
   #+END_SRC

** yasnippet

   Yet another snippet package, but this one is pretty good so we'll
   use it.

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :defer t
       :config (yas-global-mode 1))
   #+END_SRC

** password store

   As said in the header of the mode:

   "This package provides functions for working with pass ("the
   standard Unix password manager")."


   #+BEGIN_SRC emacs-lisp
     (use-package password-store
       :ensure t)
   #+END_SRC

*** And pass to browse it all

    #+BEGIN_SRC emacs-lisp
      (use-package pass
        :ensure t)
    #+END_SRC

** irc/slack and erc stuff

   erc can be used for irc and as a slack client. It needs a few
   things to make it a bit nicer even though it is actually pretty
   good out of the box.

   #+BEGIN_SRC emacs-lisp
     (use-package erc-colorize
       :ensure t
       :defer t
       :config (erc-colorize-mode 1))
   #+END_SRC

** pivotal tracker

   I've tried managing the whole team using org-mode. Even when there
   were only 4 of us and 3 of us were regular emacs users it didn't
   work. It was a lovely idea and I'll give something similar another
   crack.

   For now, we've gone full hipster with [[http://pivotaltracker.com][Pivotal Tracker]].

   #+BEGIN_SRC emacs-lisp
     (use-package pivotal-tracker
       :ensure t)
   #+END_SRC

** twittering-mode

   I have been accused by many ([[http://twitter.com/rrees][Robert Rees]] and [[http://twitter.com/cluttercup][Jane Dickson]] to name
   but two) of being constantly on twitter. This is mostly fair. I'm
   curious to see the revision history of this file and see if I
   change this description before I declare .emacs bankruptcy again.

   The best twitter client I've found is twittering-mode.

   #+BEGIN_SRC emacs-lisp
     (use-package twittering-mode
       :ensure t
       :defer t
       :bind (([M-f6] . twittering-update-status-interactive))
       :config (setq twittering-url-show-status nil
                     twittering-icon-mode 1
                     twittering-use-icon-storage t
                     twittering-use-master-password t
                     twittering-initial-timeline-spec-string
                     '("otfrom/people-i-know"
                       ":replies"
                       ":direct_messages")
                     twittering-timer-interval (* 60 30))
       (add-hook 'twittering-edit-mode-hook
                 (lambda () (ispell-minor-mode) (flyspell-mode))))
   #+END_SRC

** Emojis

   Just the unicode and github ones really. I like the ascii ones as
   they are :-) .

   #+BEGIN_SRC emacs-lisp
     (use-package emojify
       :ensure t
       :defer t
       :init (add-hook 'after-init-hook #'global-emojify-mode))
   #+END_SRC

** What is the weather?

   This probably falls under "more stupid emacs tricks", but who
   wouldn't want to to see the weather in emacs?

   #+BEGIN_SRC emacs-lisp
     (use-package wttrin
       :ensure t
       :commands (wttrin)
       :init
       (setq wttrin-default-cities '("London"
                                     "Belfast")
             wttrin-default-accept-language '("Accept-Language" . "en-GB")))
   #+END_SRC

** The Great Eye of Sauron

   #+BEGIN_SRC emacs-lisp
     (use-package sauron
       :ensure t)
   #+END_SRC

** expand-region

   Looks like a cool way to expand what it is that you want to
   select.

   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :bind (("C-=" . er/expand-region)))
   #+END_SRC

** music and sound

   Yeah, I play music from inside emacs. What of it?

   #+BEGIN_SRC emacs-lisp
     (use-package emms
       :ensure t
       :config
       (progn
         (emms-standard)
         (emms-default-players)
         (setq emms-playlist-buffer-name "Music-EMMS")
         (setq emms-source-file-default-directory (concat (getenv "HOME") "/Music/"))
         (emms-mode-line 0)))
   #+END_SRC

*** I miss big thunderstorms

    Sometimes I need to concentrate and I don't want to be engaged by
    music but just white noise won't do. I like a thunderstorm for
    that.

    #+BEGIN_SRC emacs-lisp
      (defun make-it-rain ()
        (interactive)
        (emms-play-file (concat user-emacs-directory "resources/16480__martin-lightning__severe-thunderstorm.mp3")))
    #+END_SRC

* Finishing

** Finis

   I should really come up with better exhortations than this. The
   stuff that Sam Aaron has in emacs-live I actually find quite
   inspirational. cider.el has similar, though more specifically
   clojurian things to say that I quite like as well.

   However, I've always expected that any sufficiently advanced lisp
   system has probably gained sentience. I think Emacs probably
   qualifies for that.

   Therefore, let's sign off as so...

   #+BEGIN_SRC emacs-lisp
     (message "Cogito ergo sum.")
   #+END_SRC

** Extra Bits

   #+BEGIN_EXAMPLE

     (add-to-list 'mu4e-bookmarks
                  '("maildir:\"/otfrom/[Gmail].All Mail\" \\\\Inbox" "otfrom inbox" ?o))

     (add-to-list 'mu4e-bookmarks
                  '("maildir:\"/mastodonc/[Gmail].All Mail\" \\\\Inbox" "mastodonc inbox" ?m))


   #+END_EXAMPLE
